"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"event-loop-phases","metadata":{"permalink":"/blog/event-loop-phases","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-03-02.md","source":"@site/blog/2025-03-02.md","title":"Understanding the Event Loop Phases","description":"The Event Loop is the heart of asynchronous programming in Node.js. It allows Node.js to handle non-blocking I/O operations efficiently. Understanding its phases is crucial for writing performant applications.","date":"2025-03-02T00:00:00.000Z","tags":[{"inline":true,"label":"javascript","permalink":"/blog/tags/javascript"},{"inline":true,"label":"eventloop","permalink":"/blog/tags/eventloop"},{"inline":true,"label":"nodejs","permalink":"/blog/tags/nodejs"}],"readingTime":1.995,"hasTruncateMarker":true,"authors":[{"name":"erfuuan","title":"Developer","url":"https://github.com/erfuuan","key":"erfuuan","page":null}],"frontMatter":{"slug":"event-loop-phases","title":"Understanding the Event Loop Phases","authors":["erfuuan"],"tags":["javascript","eventloop","nodejs"]},"unlisted":false},"content":"The **Event Loop** is the heart of asynchronous programming in Node.js. It allows Node.js to handle non-blocking I/O operations efficiently. Understanding its **phases** is crucial for writing performant applications.\\n\\n\x3c!-- truncate --\x3e\\n\\n## **\ud83c\udf0d Overview of the Event Loop**\\nNode.js is single-threaded but uses the **libuv** library to manage an asynchronous event-driven architecture. The event loop is responsible for scheduling and executing operations in different **phases**.\\n\\n### **\ud83d\udccc Event Loop Phases**\\nThe event loop has **six phases**, which execute in the following order:\\n\\n1. **Timers Phase** \u23f3\\n2. **I/O Callbacks Phase** \ud83c\udfaf\\n3. **Idle, Prepare Phase** \ud83d\udca4\\n4. **Poll Phase** \ud83d\udd04\\n5. **Check Phase** \u2705\\n6. **Close Callbacks Phase** \ud83d\udd1a\\n\\nLet\'s dive deeper into each phase.\\n\\n---\\n\\n### **1\ufe0f\u20e3 Timers Phase (setTimeout & setInterval)**\\n- Executes **callbacks** scheduled by `setTimeout()` and `setInterval()`.\\n- If a timer is due, its callback executes.\\n- Example:\\n  \\n  ```js\\n  setTimeout(() => console.log(\'Timer callback\'), 0);\\n  console.log(\'Synchronous Code\');\\n  ```\\n  **Output:**\\n  ```\\n  Synchronous Code\\n  Timer callback\\n  ```\\n\\n---\\n\\n### **2\ufe0f\u20e3 I/O Callbacks Phase**\\n- Executes deferred I/O callbacks, like network requests or file system operations.\\n- Not for timers, `setImmediate`, or polling.\\n\\n---\\n\\n### **3\ufe0f\u20e3 Idle, Prepare Phase**\\n- Used internally by **libuv**.\\n- Rarely affects user applications.\\n\\n---\\n\\n### **4\ufe0f\u20e3 Poll Phase (Core of Event Loop)**\\n- Retrieves new I/O events and executes **callbacks**.\\n- If no timers are pending, the event loop **waits for I/O** before proceeding.\\n- If no I/O is pending, it moves to the **Check Phase**.\\n\\n---\\n\\n### **5\ufe0f\u20e3 Check Phase (setImmediate Execution)**\\n- Executes `setImmediate()` callbacks.\\n- `setImmediate()` callbacks **always run after the poll phase**, before timers.\\n- Example:\\n  \\n  ```js\\n  setImmediate(() => console.log(\'setImmediate Callback\'));\\n  setTimeout(() => console.log(\'setTimeout Callback\'), 0);\\n  ```\\n  **Output (almost always):**\\n  ```\\n  setImmediate Callback\\n  setTimeout Callback\\n  ```\\n\\n---\\n\\n### **6\ufe0f\u20e3 Close Callbacks Phase**\\n- Executes close event handlers, such as `socket.on(\'close\', callback)`.\\n\\n---\\n\\n## **\ud83c\udd9a setImmediate() vs setTimeout(0)**\\n| Feature          | `setImmediate()` | `setTimeout(0)` |\\n|-----------------|----------------|----------------|\\n| Execution Order | Runs in **Check Phase** | Runs in **Timers Phase** |\\n| Priority       | Higher in some cases | Lower due to timer scheduling |\\n\\nExample:\\n```js\\nsetTimeout(() => console.log(\'setTimeout(0)\'), 0);\\nsetImmediate(() => console.log(\'setImmediate\'));\\n```\\n**Output (usually):**\\n```\\nsetImmediate\\nsetTimeout(0)\\n```\\n\\n---\\n\\n## **\ud83c\udfaf Conclusion**\\n- The event loop cycles through these phases **continuously**.\\n- `setImmediate()` executes before `setTimeout(0)`, but it depends on the execution context.\\n- Understanding the **event loop phases** helps optimize performance and debugging.\\n\\nHappy coding! \ud83d\ude80"}]}}')}}]);