"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8],{7122:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>a});var t=n(8469),l=n(4848),r=n(8453);const i={slug:"event-loop-phases",title:"Understanding the Event Loop Phases",authors:["erfuuan"],tags:["javascript","eventloop","nodejs"]},o=void 0,c={authorsImageUrls:[void 0]},a=[{value:"<strong>\ud83c\udf0d Overview of the Event Loop</strong>",id:"-overview-of-the-event-loop",level:2},{value:"<strong>\ud83d\udccc Event Loop Phases</strong>",id:"-event-loop-phases",level:3},{value:"<strong>1\ufe0f\u20e3 Timers Phase (setTimeout &amp; setInterval)</strong>",id:"1\ufe0f\u20e3-timers-phase-settimeout--setinterval",level:3},{value:"<strong>2\ufe0f\u20e3 I/O Callbacks Phase</strong>",id:"2\ufe0f\u20e3-io-callbacks-phase",level:3},{value:"<strong>3\ufe0f\u20e3 Idle, Prepare Phase</strong>",id:"3\ufe0f\u20e3-idle-prepare-phase",level:3},{value:"<strong>4\ufe0f\u20e3 Poll Phase (Core of Event Loop)</strong>",id:"4\ufe0f\u20e3-poll-phase-core-of-event-loop",level:3},{value:"<strong>5\ufe0f\u20e3 Check Phase (setImmediate Execution)</strong>",id:"5\ufe0f\u20e3-check-phase-setimmediate-execution",level:3},{value:"<strong>6\ufe0f\u20e3 Close Callbacks Phase</strong>",id:"6\ufe0f\u20e3-close-callbacks-phase",level:3},{value:"<strong>\ud83c\udd9a setImmediate() vs setTimeout(0)</strong>",id:"-setimmediate-vs-settimeout0",level:2},{value:"<strong>\ud83c\udfaf Conclusion</strong>",id:"-conclusion",level:2}];function h(e){const s={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(s.p,{children:["The ",(0,l.jsx)(s.strong,{children:"Event Loop"})," is the heart of asynchronous programming in Node.js. It allows Node.js to handle non-blocking I/O operations efficiently. Understanding its ",(0,l.jsx)(s.strong,{children:"phases"})," is crucial for writing performant applications."]}),"\n",(0,l.jsx)(s.h2,{id:"-overview-of-the-event-loop",children:(0,l.jsx)(s.strong,{children:"\ud83c\udf0d Overview of the Event Loop"})}),"\n",(0,l.jsxs)(s.p,{children:["Node.js is single-threaded but uses the ",(0,l.jsx)(s.strong,{children:"libuv"})," library to manage an asynchronous event-driven architecture. The event loop is responsible for scheduling and executing operations in different ",(0,l.jsx)(s.strong,{children:"phases"}),"."]}),"\n",(0,l.jsx)(s.h3,{id:"-event-loop-phases",children:(0,l.jsx)(s.strong,{children:"\ud83d\udccc Event Loop Phases"})}),"\n",(0,l.jsxs)(s.p,{children:["The event loop has ",(0,l.jsx)(s.strong,{children:"six phases"}),", which execute in the following order:"]}),"\n",(0,l.jsxs)(s.ol,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"Timers Phase"})," \u23f3"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"I/O Callbacks Phase"})," \ud83c\udfaf"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"Idle, Prepare Phase"})," \ud83d\udca4"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"Poll Phase"})," \ud83d\udd04"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"Check Phase"})," \u2705"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"Close Callbacks Phase"})," \ud83d\udd1a"]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"Let's dive deeper into each phase."}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h3,{id:"1\ufe0f\u20e3-timers-phase-settimeout--setinterval",children:(0,l.jsx)(s.strong,{children:"1\ufe0f\u20e3 Timers Phase (setTimeout & setInterval)"})}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["\n",(0,l.jsxs)(s.p,{children:["Executes ",(0,l.jsx)(s.strong,{children:"callbacks"})," scheduled by ",(0,l.jsx)(s.code,{children:"setTimeout()"})," and ",(0,l.jsx)(s.code,{children:"setInterval()"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:["\n",(0,l.jsx)(s.p,{children:"If a timer is due, its callback executes."}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:["\n",(0,l.jsx)(s.p,{children:"Example:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-js",children:"setTimeout(() => console.log('Timer callback'), 0);\nconsole.log('Synchronous Code');\n"})}),"\n",(0,l.jsx)(s.p,{children:(0,l.jsx)(s.strong,{children:"Output:"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{children:"Synchronous Code\nTimer callback\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h3,{id:"2\ufe0f\u20e3-io-callbacks-phase",children:(0,l.jsx)(s.strong,{children:"2\ufe0f\u20e3 I/O Callbacks Phase"})}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:"Executes deferred I/O callbacks, like network requests or file system operations."}),"\n",(0,l.jsxs)(s.li,{children:["Not for timers, ",(0,l.jsx)(s.code,{children:"setImmediate"}),", or polling."]}),"\n"]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h3,{id:"3\ufe0f\u20e3-idle-prepare-phase",children:(0,l.jsx)(s.strong,{children:"3\ufe0f\u20e3 Idle, Prepare Phase"})}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["Used internally by ",(0,l.jsx)(s.strong,{children:"libuv"}),"."]}),"\n",(0,l.jsx)(s.li,{children:"Rarely affects user applications."}),"\n"]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h3,{id:"4\ufe0f\u20e3-poll-phase-core-of-event-loop",children:(0,l.jsx)(s.strong,{children:"4\ufe0f\u20e3 Poll Phase (Core of Event Loop)"})}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["Retrieves new I/O events and executes ",(0,l.jsx)(s.strong,{children:"callbacks"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If no timers are pending, the event loop ",(0,l.jsx)(s.strong,{children:"waits for I/O"})," before proceeding."]}),"\n",(0,l.jsxs)(s.li,{children:["If no I/O is pending, it moves to the ",(0,l.jsx)(s.strong,{children:"Check Phase"}),"."]}),"\n"]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h3,{id:"5\ufe0f\u20e3-check-phase-setimmediate-execution",children:(0,l.jsx)(s.strong,{children:"5\ufe0f\u20e3 Check Phase (setImmediate Execution)"})}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["\n",(0,l.jsxs)(s.p,{children:["Executes ",(0,l.jsx)(s.code,{children:"setImmediate()"})," callbacks."]}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:["\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.code,{children:"setImmediate()"})," callbacks ",(0,l.jsx)(s.strong,{children:"always run after the poll phase"}),", before timers."]}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:["\n",(0,l.jsx)(s.p,{children:"Example:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-js",children:"setImmediate(() => console.log('setImmediate Callback'));\nsetTimeout(() => console.log('setTimeout Callback'), 0);\n"})}),"\n",(0,l.jsx)(s.p,{children:(0,l.jsx)(s.strong,{children:"Output (almost always):"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{children:"setImmediate Callback\nsetTimeout Callback\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h3,{id:"6\ufe0f\u20e3-close-callbacks-phase",children:(0,l.jsx)(s.strong,{children:"6\ufe0f\u20e3 Close Callbacks Phase"})}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["Executes close event handlers, such as ",(0,l.jsx)(s.code,{children:"socket.on('close', callback)"}),"."]}),"\n"]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"-setimmediate-vs-settimeout0",children:(0,l.jsx)(s.strong,{children:"\ud83c\udd9a setImmediate() vs setTimeout(0)"})}),"\n",(0,l.jsxs)(s.table,{children:[(0,l.jsx)(s.thead,{children:(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.th,{children:"Feature"}),(0,l.jsx)(s.th,{children:(0,l.jsx)(s.code,{children:"setImmediate()"})}),(0,l.jsx)(s.th,{children:(0,l.jsx)(s.code,{children:"setTimeout(0)"})})]})}),(0,l.jsxs)(s.tbody,{children:[(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Execution Order"}),(0,l.jsxs)(s.td,{children:["Runs in ",(0,l.jsx)(s.strong,{children:"Check Phase"})]}),(0,l.jsxs)(s.td,{children:["Runs in ",(0,l.jsx)(s.strong,{children:"Timers Phase"})]})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Priority"}),(0,l.jsx)(s.td,{children:"Higher in some cases"}),(0,l.jsx)(s.td,{children:"Lower due to timer scheduling"})]})]})]}),"\n",(0,l.jsx)(s.p,{children:"Example:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-js",children:"setTimeout(() => console.log('setTimeout(0)'), 0);\nsetImmediate(() => console.log('setImmediate'));\n"})}),"\n",(0,l.jsx)(s.p,{children:(0,l.jsx)(s.strong,{children:"Output (usually):"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{children:"setImmediate\nsetTimeout(0)\n"})}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"-conclusion",children:(0,l.jsx)(s.strong,{children:"\ud83c\udfaf Conclusion"})}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["The event loop cycles through these phases ",(0,l.jsx)(s.strong,{children:"continuously"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"setImmediate()"})," executes before ",(0,l.jsx)(s.code,{children:"setTimeout(0)"}),", but it depends on the execution context."]}),"\n",(0,l.jsxs)(s.li,{children:["Understanding the ",(0,l.jsx)(s.strong,{children:"event loop phases"})," helps optimize performance and debugging."]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"Happy coding! \ud83d\ude80"})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>o});var t=n(6540);const l={},r=t.createContext(l);function i(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(r.Provider,{value:s},e.children)}},8469:e=>{e.exports=JSON.parse('{"permalink":"/blog/event-loop-phases","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-03-02.md","source":"@site/blog/2025-03-02.md","title":"Understanding the Event Loop Phases","description":"The Event Loop is the heart of asynchronous programming in Node.js. It allows Node.js to handle non-blocking I/O operations efficiently. Understanding its phases is crucial for writing performant applications.","date":"2025-03-02T00:00:00.000Z","tags":[{"inline":true,"label":"javascript","permalink":"/blog/tags/javascript"},{"inline":true,"label":"eventloop","permalink":"/blog/tags/eventloop"},{"inline":true,"label":"nodejs","permalink":"/blog/tags/nodejs"}],"readingTime":1.995,"hasTruncateMarker":true,"authors":[{"name":"erfuuan","title":"Developer","url":"https://github.com/erfuuan","key":"erfuuan","page":null}],"frontMatter":{"slug":"event-loop-phases","title":"Understanding the Event Loop Phases","authors":["erfuuan"],"tags":["javascript","eventloop","nodejs"]},"unlisted":false}')}}]);